"use strict";
import * as path from 'path';
import * as application from '../application';
import * as filesystem from '../filesystem';
import { CompilerBase } from "./compilerBase";

export class BatariBasicCompiler extends CompilerBase {

    // features

    constructor() {
        super("batariBasic","batari Basic",[".bas",".bb"],path.join(application.Path,"out","bin","bb"));
    }

    protected async ExecuteCompilerAsync(): Promise<boolean> {
        console.log('debugger:BatariBasicCompiler.ExecuteCompilerAsync');

        // Premissions
        await this.RepairFilePermissionsAsync();

        // Compiler options
        let commandName = "2600bas.bat";
        if (application.IsLinux || application.IsMacOS) {
            // Linux or MacOS
            commandName = "./2600basic.sh";
        }
        
        // Compiler options
        let command = path.join(this.FolderOrPath, commandName);
        let args = [
            `"${this.FileName}"`,
            this.Args
        ];

        // Compiler environment
        let env : { [key: string]: string | null } = {};
        env["PATH"] = this.FolderOrPath;
        if (application.IsLinux || application.IsMacOS) {
            // Additional for Linux or MacOS
            env["PATH"] = ":/bin:/usr/bin:" + env["PATH"];
        }
        env["bB"] = this.FolderOrPath;
    
        // Process
        this.outputChannel.appendLine(`Building '${this.FileName}'...`); 

        // TODO: Actual compile
        this.IsRunning = true;
        this.IsRunning = false;

        // Verify file size
        if (await !this.VerifyCompiledFileSizeAsync()) return false;

        // Move file(s) to Bin folder
        if (await !this.MoveFilesToBinFolderAsync()) return false;

        // Clean up file(s) creating during compilation
        if (await !this.RemoveCompilationFilesAsync()) return false;

        // Result
        return true;
    }

    // protected LoadConfiguration(): boolean {
    //     console.log('debugger:BatariBasicCompiler.LoadConfiguration');  

    //     // Base
    //     if (!super.LoadConfiguration()) return false;

    //     // Result
    //     return true;
    // }

    protected async RepairFilePermissionsAsync(): Promise<boolean> {
        console.log('debugger:BatariBasicCompiler.RepairFilePermissionsAsync'); 

        // Validate
        if (this.CustomFolderOrPath || application.IsWindows) return true;

        // Prepare
        let architecture = "Linux";
        if (application.IsMacOS) architecture = "Darwin";

        // Process
        let result = await filesystem.SetChMod(path.join(this.FolderOrPath,'2600basic.sh'));
        if (result) result = await filesystem.SetChMod(path.join(this.FolderOrPath,`2600basic.${architecture}.x86`));
        if (result) result = await filesystem.SetChMod(path.join(this.FolderOrPath,`dasm.${architecture}.x86`));
        if (result) result = await filesystem.SetChMod(path.join(this.FolderOrPath,`bbfilter.${architecture}.x86`));
        if (result) result = await filesystem.SetChMod(path.join(this.FolderOrPath,`optimize.${architecture}.x86`));
        if (result) result = await filesystem.SetChMod(path.join(this.FolderOrPath,`postprocess.${architecture}.x86`));
        if (result) result = await filesystem.SetChMod(path.join(this.FolderOrPath,`preprocess.${architecture}.x86`));
        return result;
    }

    protected async RemoveCompilationFilesAsync(): Promise<boolean> {
        console.log('debugger:BatariBasicCompiler.RemoveCompilationFilesAsync');

        // Language specific files
        if (this.CleanUpCompilationFiles)  {
            // Process
            try {
                await filesystem.RemoveFile(path.join(this.WorkspaceFolder,`${this.FileName}.asm`));
                await filesystem.RemoveFile(path.join(this.WorkspaceFolder,`bB.asm`));
                await filesystem.RemoveFile(path.join(this.WorkspaceFolder,`includes.bB`));
                await filesystem.RemoveFile(path.join(this.WorkspaceFolder,`2600basic_variable_redefs.h`));
        
                // Notify
                this.notify(`Cleaned up files generated during compilation...`);

            } catch (error) {
                // Notify
                this.notify(`ERROR: Failed to clean up files generated during compilation (error: ${error})`);
                return false;         
            }
        }

        // Debugger files (from workspace not bin)
        // Note: Remove if option is turned off as they are generated by bB (cannot change I believe)
        return super.RemoveCompilationFilesAsync();
    }
}